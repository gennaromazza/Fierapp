Breve verifica: tutte le affermazioni elencate sono FALSE nel codice incollato.
Ecco dove e come correggere.

Cosa non torna
‚ùå onSnapshot ‚Üí getDocs + query/where: il codice usa ancora onSnapshot su items.

‚ùå item.isActive ‚Üí item.active: filtri e log usano isActive.

‚ùå addItemWithRules ‚Üí addItem: in handleItemToggle viene chiamato addItemWithRules(...).

‚ùå log ‚Äúüî• DynamicChatGuide loaded items‚Äù: non presente.

(‚úîÔ∏è opzionale) Gli sconti possono restare con onSnapshot se li vuoi realtime.

Patch minime e precise
1) Import
Sostituisci l‚Äôimport Firestore per usare query:

ts
Copia
Modifica
- import { collection, onSnapshot } from 'firebase/firestore';
+ import { collection, getDocs, query, where, onSnapshot } from 'firebase/firestore';
2) Caricamento items con getDocs + where('active','==',true)
Sostituisci interamente l‚ÄôuseEffect che carica items/discounts con questo (mantiene realtime solo per discounts):

ts
Copia
Modifica
useEffect(() => {
  let isMounted = true;

  // ITEMS: one-shot con filtro WHERE active == true
  (async () => {
    try {
      const itemsRef = collection(db, 'items');
      const qActive = query(itemsRef, where('active', '==', true));
      const snap = await getDocs(qActive);

      const loadedItems = snap.docs.map(doc => ({
        id: doc.id,
        ...(doc.data() as Item),
      }));

      console.log('üî• DynamicChatGuide loaded items', loadedItems.length, loadedItems);

      if (isMounted) setItems(loadedItems);
    } catch (err) {
      console.error('Errore caricamento items:', err);
    }
  })();

  // DISCOUNTS: se li vuoi realtime, mantieni onSnapshot
  const unsubscribeDiscounts = onSnapshot(
    collection(db, 'discounts'),
    (snapshot) => {
      const discountDoc = snapshot.docs.find(doc => doc.id === 'global');
      if (discountDoc) setDiscounts(discountDoc.data() as Discount);
    }
  );

  return () => {
    isMounted = false;
    unsubscribeDiscounts();
  };
}, []);
3) Usa item.active ovunque
Cambia tutti i punti in cui filtri o logghi con isActive:

ts
Copia
Modifica
- setItems(loadedItems.filter(item => item.isActive !== false));
+ // non serve pi√π grazie al WHERE, ma se rimane:
+ setItems(loadedItems.filter(item => item.active !== false));
Nel startServicesPhase():

ts
Copia
Modifica
- console.log('Item:', item.title, 'Category:', item.category, 'isActive:', item.isActive);
- return item.category === 'servizio' && item.isActive !== false;
+ console.log('Item:', item.title, 'Category:', item.category, 'active:', item.active);
+ return item.category === 'servizio' && item.active !== false;
Nel retry:

ts
Copia
Modifica
- const retryServices = items.filter(item => item.category === 'servizio' && item.isActive !== false);
+ const retryServices = items.filter(item => item.category === 'servizio' && item.active !== false);
4) addItemWithRules ‚Üí addItem
In handleItemToggle sostituisci la chiamata:

ts
Copia
Modifica
- const success = cart.addItemWithRules({
+ const success = cart.addItem({
    id: item.id,
    title: item.title,
    price: item.price,
    category: item.category
});
5) Logging richiesto
Il log ‚Äúüî• DynamicChatGuide loaded items‚Äù √® gi√† incluso nel punto (2).